/*
 * MOONStroks.js Ver.1.1.0 (2013/09/25) by fintopo
 * https://github.com/fintopo/MOONStrokes
 * 
 * enchantMOONのストロークデータを管理、加工するライブラリ
 */

var MOONStrokes = MOONStrokes || {};

(function(DEBUG){
  /* Paper, Strokeに追加するundersocreのメソッド */
  var methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl',
    'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select',
    'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke',
    'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest',
    'tail', 'drop', 'last', 'without', 'indexOf', 'shuffle', 'lastIndexOf',
    'isEmpty', 'chain'];

  /* 
   * MOONStrokes.Point 
   */ 
  var Point = MOONStrokes.Point = function(x, y, p) {
    this.x = x;
    this.y = y;
    this.p = p;
  };
  _.extend(Point.prototype, {
    inRange: function(x0, y0, x1, y1){
      // (x0, y0)-(x1, y1)の範囲に含まれているか調べる
      // 戻り値： 含まれている場合に true、含まれていない倍に false
      return (x0 <= this.x) && (this.x <= x1)
          && (y0 <= this.y) && (this.y <= y1);
    },
    getData: function(){
      return [this.x, this.y, this.p];
    }
  });

  /* 
   * MOONStrokes.Stroke 
   */ 
  var Stroke = MOONStrokes.Stroke = function(stroke) {
    stroke = _.extend({
       width: 2.5
      ,color: -1
      ,type: "pen"
      ,data: []
    }, stroke);
    //
    this.points = [];
    var data = stroke.data;
    var count = data.length;
    for (var i=0; i<count; i+=3) {
      this.add(data[i], data[i+1], data[i+2]);
    }
    this._setLength();
    //
    this.info = _.extend(stroke, {data: []}); // 初期値保存。dataはクリアしておく
  };
  _.extend(Stroke.prototype, {
    eraseStrokes: function(x0, y0, x1, y1){
      // (x0, y0)-(x1, y1)の範囲のポイントを削除し、ストロークを分割する。
      // 戻り値：分割したストロークの配列
      var _this = this;
      var strokes = _(this.points).reduce(function(memo, point){ // 範囲内のポイントを削除し、ストロークを分割する。
        if (point.inRange(x0, y0, x1, y1)) { // 削除対象
          memo.add_mode = false; // 次から新しいストロークにする
        } else { // 残す点
          if (memo.add_mode) { // 追記モード
            _(memo.strokes).last().add(point);
          } else { // 新しいストロークとして追加
            var stroke = new Stroke(_this.info);
            stroke.add(point);
            memo.strokes.push(stroke);
            memo.add_mode = true;
          }
        }
        return memo;
      }, {
        add_mode: false // 追記モード
        ,strokes: [] // 分割したストローク
      }).strokes;
      return _(strokes).reject(function(stroke){ // 不完全なストロークを削除する
        return (stroke.length < 2);
      }) ;
    },
    beautifyLine: function(count){
      // ストロークの美化処理
      // 現在のストロークに対して移動平均を計算する
      // count: 移動平均を計算する要素数。前後count個に対して計算する
      var _this = this;
      count = count || 2;
      //
      var points = _(_this.points).clone();
      _this.points = [];      
      var buffers = [];      
      var add_point = function(){
        var len = buffers.length;
        var x = _(buffers).reduce(function(sum, point){
          return sum + point.x;
        }, 0) / len;
        var y = _(buffers).reduce(function(sum, point){
          return sum + point.y;
        }, 0) / len;
        var p = _(buffers).reduce(function(sum, point){
          return sum + point.p;
        }, 0) / len;
        _this.add(x, y, p);
      };
      _((count+1)).times(function(){
        var point = points.shift();
        buffers.push(point);        
      });
      add_point();
      _(points).each(function(point){
        buffers.push(point);        
        add_point();
        buffers.shift();
      });
      _(count).times(function(){
        add_point();
        buffers.shift();
      });
    },
    left: function(){
      return _(this.points).min(function(point){
        return point.x;
      }).x;
    },
    top: function(){
      return _(this.points).min(function(point){
        return point.y;
      }).y;
    },
    right: function(){
      return _(this.points).max(function(point){
        return point.x;
      }).x;
    },
    bottom: function(){
      return _(this.points).max(function(point){
        return point.y;
      }).y;
    },
    minStrength: function(){
      return _(this.points).min(function(point){
        return point.p;
      }).p;
    },
    maxStrength: function(){
      return _(this.points).max(function(point){
        return point.p;
      }).p;
    },
    aveStrength: function(){
      return _(this.points).reduce(function(sum, point){
        return sum + point.p;
      }, 0) / this.points.length;
    },
    sumStrength: function(){
      return _(this.points).reduce(function(sum, point){
        return sum + point.p;
      }, 0);
    },
    add: function(x, y, p){
      var point;
      if (_.isNumber(x) && _.isNumber(y) && _.isNumber(p)) {
        point = new Point(x, y, p);
      } else if (_.isObject(x)) { // Pointオブジェクトの場合
        point = x;
      }
      var ret = this.points.push(point);
      this._setLength();
      return ret;
    },
    getData: function(){
      this.info.data = this.chain()
          .map(function(point){
            return point.getData();
          })
          .flatten()
          .value();
      return this.info;
    },
    _setLength: function(){
      this.length = this.points.length;
    }
  });
  /* Undersoreのメソッドを追加 */
  _.each(methods, function(method) {
    Stroke.prototype[method] = function() {
      var args = [].slice.call(arguments);
      args.unshift(this.points);
      return _[method].apply(_, args);
    };
  });

  /*
   * MOONStrokes.Paper
   */
  var Paper = MOONStrokes.Paper = function(id) {
    this.id = id;
    this.info = (DEBUG) ? DEBUG : MOON.getPaperJSON(this.id);
    this.strokes = _(this.info.strokes).map(function(stroke){
      return new Stroke(stroke);
    });
    this._setLength();
  };
  _.extend(Paper.prototype, {
    eraseStrokes: function(x0, y0, x1, y1){
      // (x0, y0)-(x1, y1)の範囲のストロークを削除する
      // ストロークの一部が含まれる場合は、ストロークが分割される。
      this.strokes = _(this.strokes).chain()
          .map(function(stroke){
            return stroke.eraseStrokes(x0, y0, x1, y1);
          })
          .flatten()
          .value();
      this._setLength();
    },
    rectangle: function(x0, y0, x1, y1, size, options){
      // (x0, y0)-(x1, y1)で長方形を描画する
      // size: 筆圧
      // options: ストロークの初期値
      options = _(options||{}).extend({
        data: []
      });
      var stroke = new Stroke(options);
      stroke.add(x0, y0, size);
      stroke.add(x0, y1, size);
      stroke.add(x1, y1, size);
      stroke.add(x1, y0, size);
      stroke.add(x0, y0, size);
      this.push(stroke);
      return stroke;
    },
    pop: function(){
      var ret = this.strokes.pop();
      this._setLength();
      return ret;
    },
    push: function(stroke){
      var ret = this.strokes.push(stroke);
      this._setLength();
      return ret;
    },
    save: function(){
      this.info.strokes = this.map(function(stroke){
        var ret = stroke.getData();
        if (ret.data.length > 0) {
          return ret;
        }
      });
      if (DEBUG) {
        console.log(this.info);
      } else {
        MOON.setPaperJSON(this.id, this.info);
      }
    },
    _setLength: function(){
      this.length = this.strokes.length;
    }
  });
  /* Undersoreのメソッドを追加 */
  _.each(methods, function(method) {
    Paper.prototype[method] = function() {
      var args = [].slice.call(arguments);
      args.unshift(this.strokes);
      return _[method].apply(_, args);
    };
  });

  /*
   * MOONStrokes.Page
   */
  var Page = MOONStrokes.Page = function() {
    // 現在のページデータを取得する
    this.info = (DEBUG) ? {backing: ''} : MOON.getCurrentPage();
    this.paper = new Paper(this.info.backing);
  };
  _.extend(Page.prototype, {
  });

})();
//})({"version":"0.2","x":404,"y":310,"width":126,"height":112,"scale":1.0,"color":0,"transparent":true,"strokes":[{"width":2.5,"color":-1,"type":"pen","data":[28.09375,72.00003,0.712272,28.1875,71.85715,0.7191012,28.1875,71.64288,0.72586614,28.375,71.35715,0.7325687,28.65625,71.00003,0.7372242,28.65625,70.07144,0.742509,28.5625,68.785736,0.7464481,28.5625,67.35715,0.74971485,28.5625,65.85715,0.7529674,28.5625,65.00003,0.7549122,28.46875,64.00003,0.75685203,28.375,62.857147,0.75749755,28.28125,61.714294,0.7581425,28.1875,60.50003,0.7587869,28.0,59.285736,0.7587869,28.0,58.142883,0.75943077,27.71875,57.07144,0.75943077,27.625,55.857147,0.76071686,27.4375,54.714294,0.76071686,27.25,53.642883,0.76200074,27.0625,52.57144,0.76200074,27.0625,51.642883,0.7626419,27.0625,50.714294,0.7639226,26.875,49.785736,0.7639226,26.78125,48.785736,0.76456213,26.78125,47.785736,0.7632825,26.6875,47.07144,0.76200074,26.6875,46.07144,0.76200074,26.59375,45.214294,0.7626419,26.59375,44.285736,0.7639226,26.5,43.357147,0.7652011,26.40625,42.57144,0.7658396,26.40625,41.785736,0.7664775,26.3125,41.214294,0.7664775,26.3125,40.42859,0.7658396,26.3125,39.857147,0.7658396,26.3125,39.285736,0.7658396,26.3125,38.714294,0.7683881,26.6875,38.357147,0.7696592,27.0625,37.857147,0.7721952,27.625,37.57144,0.7740917,28.1875,37.357147,0.77598363,28.75,37.07144,0.7778709,29.5,36.785736,0.77849895,30.34375,36.642883,0.78038013,31.375,36.57144,0.78225684,32.5,36.357147,0.78412896,33.53125,36.142883,0.7859967,34.5625,36.00003,0.7872394,35.59375,35.642883,0.78786,37.09375,35.42859,0.7884801,38.78125,35.214294,0.7884801,40.375,35.00003,0.78909975,41.875,34.714294,0.78971887,43.1875,34.50003,0.79033756,44.6875,34.285736,0.79280734,46.09375,34.00003,0.79403937,47.59375,33.714294,0.7952695,48.625,33.57144,0.797724,49.65625,33.357147,0.79894847,50.6875,33.07144,0.8013917,51.8125,32.785736,0.8020014,52.65625,32.50003,0.8026106,53.59375,32.285736,0.8032193,54.625,32.00003,0.8032193,55.65625,31.642883,0.8044354,56.6875,31.428589,0.8044354,57.625,31.142883,0.8044354,58.5625,30.857147,0.8032193,59.59375,30.785736,0.8032193,60.4375,30.714294,0.8032193,61.28125,30.642883,0.8026106,62.125,30.714294,0.8032193,62.78125,30.714294,0.8038276,63.53125,30.785736,0.8044354,64.1875,31.0,0.8044354,64.84375,31.142883,0.8032193,65.5,31.285736,0.8026106,66.0625,31.428589,0.8026106,66.71875,31.571442,0.8026106,67.28125,31.785736,0.8026106,68.125,32.07144,0.8020014,68.78125,32.285736,0.8032193,69.34375,32.285736,0.8044354,70.0,32.50003,0.8044354,70.5625,32.57144,0.8044354,71.125,32.785736,0.8038276,71.5,33.285736,0.8044354,71.78125,33.642883,0.8044354,71.96875,34.07144,0.80504274,72.0625,34.57144,0.8044354,72.15625,35.285736,0.8032193,72.15625,36.00003,0.8032193,72.0625,36.714294,0.8032193,71.96875,37.42859,0.8032193,72.0625,38.07144,0.8032193,72.0625,38.785736,0.8032193,71.96875,39.50003,0.8026106,71.875,40.42859,0.8032193,71.96875,41.357147,0.8044354,71.96875,42.285736,0.8044354,71.96875,43.285736,0.80504274,72.0625,44.357147,0.8044354,72.0625,45.42859,0.8044354,72.0625,46.50003,0.8044354,72.15625,47.714294,0.8038276,72.15625,48.785736,0.8044354,72.15625,49.785736,0.80504274,72.25,50.714294,0.8044354,72.25,51.785736,0.8038276,72.34375,52.785736,0.8026106,72.4375,53.714294,0.8032193,72.625,54.642883,0.8032193,72.625,55.57144,0.8044354,72.8125,56.57144,0.8044354,72.90625,57.57144,0.8038276,73.0,58.642883,0.80504274,73.09375,59.642883,0.80504274,73.09375,60.642883,0.80625606,73.1875,61.642883,0.80686206,73.1875,62.50003,0.80686206,73.28125,63.357147,0.80625606,73.28125,64.07144,0.80625606,73.375,64.714294,0.80686206,73.375,65.50003,0.80686206,73.46875,66.214294,0.8080726,73.46875,66.785736,0.8080726,73.46875,67.50003,0.80867726,73.5625,68.285736,0.80867726,73.46875,68.85715,0.8080726,73.5625,69.57144,0.80988514,73.5625,70.285736,0.80988514,73.5625,70.785736,0.80867726,73.5625,71.42859,0.80988514,73.65625,72.07144,0.80867726,73.65625,72.57144,0.8092814,73.46875,73.214294,0.8092814,73.09375,73.64288,0.80867726,72.71875,74.07144,0.80867726,72.15625,74.214294,0.80867726,71.6875,74.50003,0.80867726,71.03125,74.50003,0.80988514,70.375,74.57144,0.80867726,69.625,74.57144,0.80867726,68.875,74.42859,0.80867726,68.125,74.285736,0.80867726,67.5625,74.214294,0.80867726,66.8125,74.214294,0.80988514,66.0625,74.214294,0.80988514,65.40625,74.214294,0.8092814,64.5625,74.285736,0.80988514,63.71875,74.285736,0.80988514,62.875,74.42859,0.8092814,62.03125,74.714294,0.80988514,61.1875,74.85715,0.8092814,60.0625,75.14288,0.80867726,59.125,75.42859,0.80867726,58.1875,75.50003,0.8074676,57.15625,75.57144,0.8080726,56.125,75.64288,0.80867726,55.09375,75.714294,0.80867726,54.0625,75.714294,0.8080726,53.125,75.785736,0.8074676,52.375,75.785736,0.8074676,51.53125,75.714294,0.8074676,50.59375,75.85715,0.8080726,49.5625,76.14288,0.80867726,48.8125,76.42859,0.8092814,47.96875,76.57144,0.80867726,47.125,76.785736,0.8092814,46.28125,76.85715,0.8080726,45.53125,77.14288,0.8080726,44.6875,77.35715,0.8074676,44.03125,77.50003,0.80867726,43.09375,77.50003,0.8092814,42.34375,77.50003,0.80988514,41.6875,77.64288,0.80988514,41.03125,77.785736,0.8092814,40.28125,77.785736,0.8092814,39.53125,77.64288,0.8104884,38.875,77.57144,0.81109124,38.125,77.42859,0.81229556,37.65625,77.42859,0.8164966,37.09375,77.285736,0.82008034,36.4375,77.214294,0.82838213,35.875,77.14288,0.8377692,35.21875,77.214294,0.8406812]}],"clip":{"width":5.0,"color":-16777216,"type":"pen","data":[22.0,82.0,1.0,22.0,81.0,1.0,22.0,80.0,1.0,22.0,79.0,1.0,22.0,78.0,1.0,22.0,77.0,1.0,22.0,76.0,1.0,22.0,75.0,1.0,22.0,73.0,1.0,22.0,71.5,1.0,22.0,70.0,1.0,22.0,68.0,1.0,22.0,66.0,1.0,22.0625,64.5,1.0,22.0,63.0,1.0,21.0,61.0,1.0,20.9375,58.5625,1.0,21.0,56.0,1.0,21.0,54.3125,1.0,21.0,53.0,1.0,21.0,51.0,1.0,21.0,49.5,1.0,21.0,48.0,1.0,21.0,46.0,1.0,21.0,44.5,1.0,21.0,43.0,1.0,21.0,41.0,1.0,21.0,40.0,1.0,21.0,38.0,1.0,21.0,36.0,1.0,21.0,35.0,1.0,21.0,34.0,1.0,22.0,33.0,1.0,22.0,32.0,1.0,22.0,31.0,1.0,23.0,30.0,1.0,24.0,29.0,1.0,25.0,29.0,1.0,27.0,28.0,1.0,29.0,28.0,1.0,31.8125,27.0,1.0,35.0,26.0,1.0,37.625,25.9375,1.0,40.0,26.0,1.0,42.125,25.5625,1.0,44.0,25.0,1.0,45.5625,24.4375,1.0,47.0,24.0,1.0,48.5625,24.0,1.0,50.0,24.0,1.0,52.0,23.0,1.0,53.4375,23.0,1.0,55.0,23.0,1.0,56.5,22.5,1.0,58.0,22.0,1.0,59.5,22.0,1.0,61.0,22.0,1.0,62.375,21.5,1.0,64.0,21.0,1.0,66.5625,21.0,1.0,69.0,21.0,1.0,71.0,20.0,1.0,73.0,20.0,1.0,75.0,20.0,1.0,77.0,20.0,1.0,79.0,20.0,1.0,80.0,20.0,1.0,82.0,20.0,1.0,84.0,20.0,1.0,85.0,20.0,1.0,86.0,20.0,1.0,87.0,21.0,1.0,88.0,21.0,1.0,89.0,21.0,1.0,90.0,22.0,1.0,92.0,22.0,1.0,92.0,23.0,1.0,93.0,23.0,1.0,94.0,23.0,1.0,94.0,24.0,1.0,95.0,24.0,1.0,96.0,26.0,1.0,97.0,27.0,1.0,97.0,28.0,1.0,97.0,29.0,1.0,98.0,30.0,1.0,98.0,32.0,1.0,98.5,34.5,1.0,99.0,37.0,1.0,99.0,39.0,1.0,98.9375,40.4375,1.0,99.0,42.0,1.0,99.5,43.4375,1.0,100.0,45.0,1.0,100.0625,47.0,1.0,100.0,49.0,1.0,99.9375,50.5625,1.0,100.0,52.0,1.0,100.5,53.375,1.0,101.0,55.0,1.0,101.0,57.5,1.0,101.0,60.0,1.0,101.5,61.6875,1.0,102.0,63.0,1.0,102.0,65.0,1.0,102.0,67.0,1.0,103.0,69.0,1.0,103.0,71.0,1.0,103.0,73.0,1.0,104.0,75.0,1.0,104.0,76.0,1.0,104.0,78.0,1.0,104.0,80.0,1.0,104.0,81.5625,1.0,104.0,83.0,1.0,104.0,84.0,1.0,105.0,85.0,1.0,105.0,86.0,1.0,105.0,87.0,1.0,105.0,88.0,1.0,105.0,89.0,1.0,104.0,90.0,1.0,103.0,90.0,1.0,102.0,91.0,1.0,101.0,91.0,1.0,99.0,91.0,1.0,97.0,91.0,1.0,95.75,91.0,1.0,94.0,91.0,1.0,91.0,91.0,1.0,88.0,91.0,1.0,86.3125,91.0625,1.0,85.0,91.0,1.0,83.5625,90.5,1.0,82.0,90.0,1.0,80.0,89.9375,1.0,78.0,90.0,1.0,76.5,90.0,1.0,75.0,90.0,1.0,73.25,90.0,1.0,71.0,90.0,1.0,67.4375,90.0,1.0,64.0,90.0,1.0,62.25,90.0,1.0,61.0,90.0,1.0,59.5,90.0625,1.0,58.0,90.0,1.0,56.5,89.5,1.0,55.0,89.0,1.0,53.4375,88.9375,1.0,52.0,89.0,1.0,50.0,89.0,1.0,48.5625,89.5,1.0,47.0,90.0,1.0,45.4375,90.0625,1.0,44.0,90.0,1.0,42.0,90.0,1.0,41.0,90.0,1.0,40.0,90.0,1.0,38.0,90.0,1.0,37.0,90.0,1.0,36.0,90.0,1.0,35.0,90.0,1.0,34.0,90.0,1.0,22.0,82.0,1.0]}});